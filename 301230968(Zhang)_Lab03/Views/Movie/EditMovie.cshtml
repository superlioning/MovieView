@model _301230968_Zhang__Lab03.Models.MovieViewModel

@{
    ViewData["Title"] = "Edit Movie Details";
    var currentUsername = Context.Session.GetString("Username");
    var currentUserId = Context.Session.GetString("UserId");

}
@if (TempData["Message"] != null)
{
    <div id="tempMessage" class="alert alert-success">
        @TempData["Message"]
    </div>
}
@if (currentUserId != null && currentUsername != null)
{
    <div class="user-info-banner bg-light">
        <span class="username">Hello, @currentUsername</span>
        <span class="user-id">(@currentUserId)</span>
    </div>

    <div class="container mt-2 mb-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-secondary text-white text-center">
                        <h2 class="mb-0">Edit Movie Details</h2>
                    </div>
                    <div class="card-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <form method="post" enctype="multipart/form-data" asp-action="EditMovie">
                            <input type="hidden" name="MovieID" value="@Model.MovieID" />
                            <input type="hidden" name="UserID" value="@currentUserId" />
                            <!-- Title -->
                            <div class="form-group mb-3">
                                <label asp-for="Title"></label>
                                <input asp-for="Title" class="form-control" />
                                <span asp-validation-for="Title" class="text-danger"></span>
                            </div>
                            <!-- Genre -->
                             <div class="form-group mb-3">
                                <label asp-for="Genre"></label>
                                <select class="form-control" id="genre" name="Genre">
                                    @foreach (var genre in ViewBag.Genres as List<string>)
                                    {
                                        @if (Model.Genre == genre)
                                        {
                                            <option value="@genre" selected>@genre</option>
                                        }
                                        else
                                        {
                                            <option value="@genre">@genre</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="Genre" class="text-danger"></span>
                            </div>
                            <!-- Description -->
                            <div class="form-group mb-3">
                                <label asp-for="Description"></label>
                                <textarea asp-for="Description" class="form-control"></textarea>
                                <span asp-validation-for="Description" class="text-danger"></span>
                            </div>
                            <!-- Release Date -->
                            <div class="form-group mb-3">
                                <label asp-for="ReleaseDate">Release Date (Optional)</label>
                                <input asp-for="ReleaseDate" class="form-control" />
                                <span asp-validation-for="ReleaseDate" class="text-danger"></span>
                            </div>
                            <!-- Directors -->
                            <div class="form-group mb-3">
                                <label asp-for="Directors">Director(s)</label>
                                <div id="directorInputs">
                                    @for (var i = 0; i < Model.Directors.Count; i++)
                                    {
                                        <div class="input-group mb-2">
                                            <input asp-for="Directors[@i]" class="form-control" />
                                            <button type="button" class="btn btn-outline-success" onclick="addDirector()">+</button>
                                            <button type="button" class="btn btn-outline-danger" onclick="removeDirector(this)">-</button>
                                        </div>                                     
                                    }
                                </div>
                                <span asp-validation-for="Directors" class="text-danger"></span>
                            </div>
                            <!-- Actors -->
                            <div class="form-group mb-3">
                                <label asp-for="Actors">Actor(s)</label>
                                <div id="actorInputs">
                                    @for (var i = 0; i < Model.Actors.Count; i++)
                                    {
                                        <div class="input-group mb-2">
                                            <input asp-for="Actors[@i]" class="form-control" />
                                            <button type="button" class="btn btn-outline-success" onclick="addActor()">+</button>
                                            <button type="button" class="btn btn-outline-danger" onclick="removeActor(this)">-</button>
                                        </div>    
                                    }
                                </div>
                                <span asp-validation-for="Actors" class="text-danger"></span>
                            </div>
                            <!-- Movie File -->
                            <div class="form-group mb-3">
                                <label asp-for="MovieFile">Movie File (Optional)</label>
                                <input type="file" class="form-control" id="movieFile" name="MovieFile">
                                @Html.ValidationMessageFor(model => model.MovieFile, "", new { @class = "text-danger" })
                            </div>
                            <!-- Image File -->
                            <div class="form-group mb-4">
                                <label asp-for="ImageFile">Image File (Optional)</label>
                                <input type="file" class="form-control" id="imageFile" name="ImageFile">
                                @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group d-flex justify-content-between mb-3">
                                <button type="submit" class="btn btn-primary">Update Movie</button>
                                <button type="button" class="btn btn-secondary" onclick="confirmCancel()">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="cancelModal" class="modal fade" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Cancel</h5>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to abandon editing this movie?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                    <button type="button" class="btn btn-primary" onclick="confirmCancelAction()">Yes</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script>
        function addDirector() {
            const div = document.createElement('div');
            div.className = 'input-group mb-2';

            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'form-control';
            input.name = 'Directors[]';
            input.required = true;

            const addButton = document.createElement('button');
            addButton.type = 'button';
            addButton.className = 'btn btn-outline-success';
            addButton.textContent = '+';
            addButton.onclick = function () { addDirector() };

            const removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.className = 'btn btn-outline-danger ml-2';
            removeButton.textContent = '-';
            removeButton.onclick = function () { removeDirector(removeButton) };

            div.appendChild(input);
            div.appendChild(addButton);
            div.appendChild(removeButton);

            document.getElementById('directorInputs').appendChild(div);
        }

        function removeDirector(button) {
            const inputGroup = button.closest('.input-group');
            if (inputGroup.parentNode.childElementCount > 1) {
                inputGroup.remove();
            }
        }

        function addActor() {
            const div = document.createElement('div');
            div.className = 'input-group mb-2';

            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'form-control';
            input.name = 'Actors[]';
            input.required = true;

            const addButton = document.createElement('button');
            addButton.type = 'button';
            addButton.className = 'btn btn-outline-success';
            addButton.textContent = '+';
            addButton.onclick = function () { addActor() };

            const removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.className = 'btn btn-outline-danger ml-2';
            removeButton.textContent = '-';
            removeButton.onclick = function () { removeActor(removeButton) };

            div.appendChild(input);
            div.appendChild(addButton);
            div.appendChild(removeButton);

            document.getElementById('actorInputs').appendChild(div);
        }

        function removeActor(button) {
            const inputGroup = button.closest('.input-group');
            if (inputGroup.parentNode.childElementCount > 1) {
                inputGroup.remove();
            }
        }
        function confirmCancel() {
            $('#cancelModal').modal('show');
        }

        function confirmCancelAction() {
            $.post('@Url.Action("CancelAddMovie")', function (response) {
                window.location.href = response.redirectToUrl;
            });
        }
        $('#cancelModal .btn-secondary, #cancelModal .close').on('click', function () {
            $('#cancelModal').modal('hide');
        });
    </script>
}